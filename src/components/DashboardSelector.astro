---
// Este componente manejará la selección y visualización de dashboards
---

---
// Este componente manejará la selección y visualización de dashboards
---

<div class="w-full mx-auto flex flex-col" style="min-height: calc(100vh - 160px);">
  <div class="w-full flex flex-col sm:flex-row gap-6 mb-6 flex-shrink-0">
    <div class="flex-1 min-w-64">
      <label for="dashboard-select" class="flex mb-3 text-sm font-semibold text-gray-700 items-center gap-2">
        <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
        Seleccionar Dashboard:
      </label>
      <div class="relative">
        <select 
          id="dashboard-select" 
          class="w-full px-4 py-3 border-2 border-gray-200 rounded-xl text-base bg-white/80 backdrop-blur-sm transition-all duration-300 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 focus:bg-white hover:border-gray-300 appearance-none cursor-pointer"
        >
          <option value="">Cargando dashboards...</option>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center px-3 pointer-events-none">
          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </div>
      </div>
    </div>
    <button 
      id="show-dashboard" 
      class="px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white border-none rounded-xl text-base font-semibold cursor-pointer transition-all duration-300 hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl self-end"
      disabled
    >
      <span class="flex items-center justify-center gap-2">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
        </svg>
        Mostrar Dashboard
      </span>
    </button>
  </div>
  
  <div id="loading" class="w-full hidden flex-col items-center justify-center flex-1 p-10 bg-white/60 backdrop-blur-sm rounded-2xl border-2 border-dashed border-gray-300 min-h-48 shadow-lg">
    <div class="relative">
      <div class="w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mb-4"></div>
      <div class="absolute inset-0 w-12 h-12 border-4 border-transparent border-b-purple-400 rounded-full animate-spin animation-delay-2000"></div>
    </div>
    <p class="text-gray-600 text-base m-0 font-medium">Cargando dashboard...</p>
    <div class="mt-2 flex gap-1">
      <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
      <div class="w-2 h-2 bg-purple-500 rounded-full animate-bounce animation-delay-200"></div>
      <div class="w-2 h-2 bg-indigo-500 rounded-full animate-bounce animation-delay-400"></div>
    </div>
  </div>
  
  <div id="dashboard-container" class="p-4 w-full bg-white/80 backdrop-blur-lg rounded-2xl shadow-2xl border border-white/20 overflow-auto relative hidden" style="min-height: 600px; max-height: none;">
    <!-- El componente se creará dinámicamente aquí -->
  </div>
  
  <div id="error-message" class="w-full p-4 bg-red-50/90 backdrop-blur-sm border-l-4 border-red-500 rounded-r-xl text-red-700 text-sm mt-4 hidden shadow-lg">
    <div class="flex items-center gap-3">
      <div class="flex-shrink-0">
        <svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <div class="flex-1">
        <span class="font-medium">Error:</span>
        <span id="error-text" class="ml-1"></span>
      </div>
    </div>
  </div>
</div>

<script>
  // API Key desde variables de entorno
  const API_KEY = import.meta.env.PUBLIC_EMBEDDABLE_API_KEY;
  const API_BASE_URL = 'https://api.us.embeddable.com/api/v1';
  
  // Tipos de datos
  interface Dashboard {
    id: string;
    name: string;
    lastPublishedAt: Record<string, string>;
  }
  
  interface DashboardsResponse {
    embeddables: Dashboard[];
  }
  
  interface TokenResponse {
    token: string;
  }
  
  let dashboards: Dashboard[] = [];
  
  // Elementos del DOM
  const selectElement = document.getElementById('dashboard-select') as HTMLSelectElement | null;
  const showButton = document.getElementById('show-dashboard') as HTMLButtonElement | null;
  const loadingElement = document.getElementById('loading') as HTMLElement | null;
  const dashboardContainer = document.getElementById('dashboard-container') as HTMLElement | null;
  let embeddableComponent: HTMLElement | null = null;
  const errorMessage = document.getElementById('error-message') as HTMLElement | null;
  
  // Función para mostrar/ocultar elementos
  function toggleElement(element: HTMLElement | null, show: boolean): void {
    if (!element) return;
    
    if (show) {
      element.classList.remove('hidden');
      // Agregar flex para el loading
      if (element.id === 'loading') {
        element.classList.add('flex');
      }
    } else {
      element.classList.add('hidden');
      // Remover flex para el loading
      if (element.id === 'loading') {
        element.classList.remove('flex');
      }
    }
  }
  
  // Función para ajustar el contenedor dinámicamente
  function setupDynamicContainer(): void {
    if (!dashboardContainer) return;
    
    // Remover cualquier restricción de altura
    dashboardContainer.style.maxHeight = 'none';
    dashboardContainer.style.height = 'auto';
    
    console.log('Configurando contenedor dinámico sin restricciones de altura');
  }
  function showError(message: string): void {
    if (!errorMessage) return;
    
    const errorText = document.getElementById('error-text');
    if (errorText) {
      errorText.textContent = message;
    } else {
      errorMessage.textContent = message;
    }
    toggleElement(errorMessage, true);
    toggleElement(loadingElement, false);
    
    // Add shake animation
    errorMessage.classList.add('animate-shake');
    setTimeout(() => {
      errorMessage.classList.remove('animate-shake');
    }, 500);
  }
  
  // Función para obtener la lista de dashboards
  async function fetchDashboards(): Promise<Dashboard[]> {
    try {
      const response = await fetch(`${API_BASE_URL}/embeddables`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${API_KEY}`
        }
      });
      
      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }
      
      const data: DashboardsResponse = await response.json();
      return data.embeddables || [];
    } catch (error) {
      console.error('Error fetching dashboards:', error);
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      showError('Error al cargar la lista de dashboards: ' + errorMessage);
      return [];
    }
  }
  
  // Función para obtener el token de un dashboard específico
  async function fetchDashboardToken(embeddableId: string): Promise<string | null> {
    try {
      console.log('Solicitando token para embeddableId:', embeddableId);
      
      // Aquí necesitaré los parámetros específicos que me proporciones
      const tokenRequest = {
        embeddableId: embeddableId,
        expiryInSeconds: 60 * 60 * 24, // 24 horas
        securityContext: {
          // Agregar contexto de seguridad según tus necesidades
        },
        user: 'erick.alvarado@cit.hn', // Identificador único del usuario
        environment: 'default' // Ambiente por defecto
      };
      
      console.log('Datos de la petición del token:', tokenRequest);
      
      const response = await fetch(`${API_BASE_URL}/security-token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${API_KEY}`
        },
        body: JSON.stringify(tokenRequest)
      });
      
      console.log('Respuesta del servidor:', response.status, response.statusText);
      
      if (!response.ok) {
        // Intentar obtener más detalles del error
        const errorText = await response.text();
        console.error('Error del servidor:', errorText);
        throw new Error(`Error ${response.status}: ${response.statusText} - ${errorText}`);
      }
      
      const data: TokenResponse = await response.json();
      console.log('Token recibido exitosamente');
      return data.token;
    } catch (error) {
      console.error('Error completo fetching dashboard token:', error);
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      showError('Error al obtener el token del dashboard: ' + errorMessage);
      return null;
    }
  }
  
  // Función para mostrar el dashboard
  async function showDashboard(): Promise<void> {
    if (!selectElement) {
      showError('Error: Elemento select no encontrado');
      return;
    }
    
    const selectedDashboardId = selectElement.value;
    
    if (!selectedDashboardId) {
      showError('Por favor selecciona un dashboard');
      return;
    }
    
    // Mostrar loading
    toggleElement(loadingElement, true);
    toggleElement(errorMessage, false);
    toggleElement(dashboardContainer, false);
    
    console.log('Obteniendo token para dashboard:', selectedDashboardId);
    
    // Obtener token
    const token = await fetchDashboardToken(selectedDashboardId);
    
    console.log('Token obtenido:', token ? 'Sí' : 'No', token?.substring(0, 50) + '...');
    
    if (token && dashboardContainer) {
      console.log('Creando componente embeddable dinámicamente...');
      
      // Limpiar el contenedor
      dashboardContainer.innerHTML = '';
      
      // Crear el componente em-beddable dinámicamente
      embeddableComponent = document.createElement('em-beddable');
      embeddableComponent.setAttribute('token', token);
      embeddableComponent.className = 'block w-full border-0';
      embeddableComponent.style.cssText = 'height: auto; min-height: 800px; width: 100%;';
      
      // Agregar el componente al contenedor
      dashboardContainer.appendChild(embeddableComponent);
      
      console.log('Componente embeddable creado y agregado al DOM');
      
      // Función simplificada para ajustar la altura
      const adjustHeight = () => {
        if (embeddableComponent) {
          // Remover cualquier restricción de altura del contenedor
          dashboardContainer.style.height = 'auto';
          dashboardContainer.style.maxHeight = 'none';
          
          console.log('Altura del contenedor ajustada para permitir crecimiento libre');
        }
      };
      
      // Ajustar altura después de un breve delay
      setTimeout(adjustHeight, 500);
      
      // Mostrar el dashboard
      toggleElement(loadingElement, false);
      toggleElement(dashboardContainer, true);
      
    } else if (!dashboardContainer) {
      showError('Error: Contenedor del dashboard no encontrado');
      showError('Error: Componente embeddable no encontrado');
    } else {
      showError('Error: No se pudo obtener el token del dashboard');
    }
  }
  
  // Función para inicializar la aplicación
  async function initializeApp(): Promise<void> {
    if (!selectElement || !showButton) {
      showError('Error: Elementos de la interfaz no encontrados');
      return;
    }
    
    // Configurar contenedor dinámico
    setupDynamicContainer();
    
    // Cargar lista de dashboards
    dashboards = await fetchDashboards();
    
    if (dashboards.length > 0) {
      // Limpiar el select
      selectElement.innerHTML = '<option value="">Selecciona un dashboard...</option>';
      
      // Agregar opciones al select
      dashboards.forEach((dashboard: Dashboard) => {
        const option = document.createElement('option');
        option.value = dashboard.id;
        option.textContent = dashboard.name;
        selectElement?.appendChild(option);
      });
      
      // Habilitar el botón cuando se seleccione un dashboard
      selectElement.addEventListener('change', () => {
        if (showButton && selectElement) {
          showButton.disabled = !selectElement.value;
        }
      });
      
      // Habilitar el botón
      showButton.disabled = false;
    } else {
      selectElement.innerHTML = '<option value="">No hay dashboards disponibles</option>';
    }
  }
  
  // Event listeners
  if (showButton) {
    showButton.addEventListener('click', showDashboard);
  }
  
  // Inicializar cuando se cargue la página
  document.addEventListener('DOMContentLoaded', initializeApp);
  
  // Manejar redimensionamiento de ventana (mantener sin restricciones)
  window.addEventListener('resize', () => {
    if (dashboardContainer && !dashboardContainer.classList.contains('hidden')) {
      // Asegurar que no haya restricciones de altura
      dashboardContainer.style.maxHeight = 'none';
      dashboardContainer.style.height = 'auto';
    }
  });
</script>
